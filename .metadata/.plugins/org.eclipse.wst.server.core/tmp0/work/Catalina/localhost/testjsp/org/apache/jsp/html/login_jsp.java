/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.84
 * Generated at: 2025-08-25 02:46:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/html/header.jsp", Long.valueOf(1756089934365L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>login</title>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	body{\r\n");
      out.write("		font:14px/1.8 Arial, Helvetica, sans-serif;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	.frame{\r\n");
      out.write("		width:800px;\r\n");
      out.write("		margin : 0 auto;\r\n");
      out.write("		border: 1px solid #aaaaaa;\r\n");
      out.write("	}\r\n");
      out.write("	.header{\r\n");
      out.write("		padding : 40px 10px;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("		background: #e8f5e9;\r\n");
      out.write("		margin-bottom: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	.logo{\r\n");
      out.write("		font-size: 2em;\r\n");
      out.write("		font-weight: bold;\r\n");
      out.write("		background: #f0f8ff;\r\n");
      out.write("		color:#ffffff;\r\n");
      out.write("		display: inline-block;\r\n");
      out.write("		padding : 0 8px;\r\n");
      out.write("	}\r\n");
      out.write("	.container{\r\n");
      out.write("		overflow: hidden;\r\n");
      out.write("	}\r\n");
      out.write("	.nav{\r\n");
      out.write("		float: left;\r\n");
      out.write("		width: 150px;\r\n");
      out.write("		background: #333;\r\n");
      out.write("		color: #fff;\r\n");
      out.write("		margin-right: 0px;\r\n");
      out.write("	}\r\n");
      out.write("	.nav-list{\r\n");
      out.write("		list-style: none;\r\n");
      out.write("		margin: 0;\r\n");
      out.write("		padding: 10px 0;\r\n");
      out.write("	}\r\n");
      out.write("	.nav-item{\r\n");
      out.write("		margin: 4px;	\r\n");
      out.write("	}\r\n");
      out.write("	.nav-link{\r\n");
      out.write("		display: block;\r\n");
      out.write("		text-decoration: none;\r\n");
      out.write("		color: #fff;\r\n");
      out.write("		padding: 4px 10px;\r\n");
      out.write("	}\r\n");
      out.write("	.nav-link:hover{\r\n");
      out.write("		background: #5457de;\r\n");
      out.write("	}\r\n");
      out.write("	.content{\r\n");
      out.write("		float: left;\r\n");
      out.write("		width: 600px;\r\n");
      out.write("		margin-left: 10px;\r\n");
      out.write("	}\r\n");
      out.write("	.foot{\r\n");
      out.write("		text-align: center;\r\n");
      out.write("		font-size: 10px;\r\n");
      out.write("	}\r\n");
      out.write("	.foot-list{\r\n");
      out.write("		list-style: none;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.foot-item{\r\n");
      out.write("		display: inline-block;\r\n");
      out.write("		margin: 0;\r\n");
      out.write("		padding : 0 15px;\r\n");
      out.write("		border-right: 1px solid #aaa; \r\n");
      out.write("	}\r\n");
      out.write("	.foot-itemend{\r\n");
      out.write("		display: inline-block;\r\n");
      out.write("		margin: 0;\r\n");
      out.write("		padding : 0 10px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	var em = test01();\r\n");
      out.write("	\r\n");
      out.write("	function test01() {\r\n");
      out.write("		alert(\"문서 로딩시 바로 실행!\");\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	document.write(\"<h1>스크립트에서 문서 출력</h1>\");\r\n");
      out.write("	console.log(\"브라우저 콘솔에 출력됨\");\r\n");
      out.write("	\r\n");
      out.write("	function test02(){\r\n");
      out.write("		alert(\"눌러짐!\");\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("<!-- ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "test05.jsp", out, false);
      out.write("\r\n");
      out.write("	<!-- flame start -->\r\n");
      out.write("	<div class=\"frame\">\r\n");
      out.write("		<div class=\"header\">\r\n");
      out.write("			");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "top.jsp", out, false);
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<div class=\"nav\">\r\n");
      out.write("				");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "nav.jsp", out, false);
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"content\">\r\n");
      out.write("				<h1>로그인</h1>\r\n");
      out.write("				\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div class=\"foot\"> \r\n");
      out.write("			");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "foot.jsp", out, false);
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- flame start -->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
