/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.84
 * Generated at: 2025-08-22 08:56:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class imgslide_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("\r\n");
      out.write("<title>Slideimg</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("/* 초기화 */\r\n");
      out.write("* {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("li {\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 보여줄 구간의 높이와 넓이 설정 */\r\n");
      out.write("#slideShow {\r\n");
      out.write("	width: 500px;\r\n");
      out.write("	height: 300px;\r\n");
      out.write("	position: relative;\r\n");
      out.write("	margin: 50px auto;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	/*리스트 형식으로 이미지를 일렬로 \r\n");
      out.write("  정렬할 것이기 때문에, 500px 밖으로 튀어 나간 이미지들은\r\n");
      out.write("  hidden으로 숨겨줘야됨*/\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".slides {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 0;\r\n");
      out.write("	top: 0;\r\n");
      out.write("	width: 2500px; /* 슬라이드할 사진과 마진 총 넓이 */\r\n");
      out.write("	transition: left 0.5s ease-out;\r\n");
      out.write("	/*ease-out: 처음에는 느렸다가 점점 빨라짐*/\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 첫 번째 슬라이드 가운데에 정렬하기위해\r\n");
      out.write("첫번째 슬라이드만 margin-left조정 */\r\n");
      out.write(".slides li:first-child {\r\n");
      out.write("	margin-left: 100px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 슬라이드들 옆으로 정렬 */\r\n");
      out.write(".slides li:not(:last-child) {\r\n");
      out.write("	float: left;\r\n");
      out.write("	margin-right: 100px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".slides li {\r\n");
      out.write("	\r\n");
      out.write("	width : 300px;\r\n");
      out.write("	float: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".controller span {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	background-color: transparent;\r\n");
      out.write("	color: black;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	border-radius: 50%;\r\n");
      out.write("	padding: 10px 20px;\r\n");
      out.write("	top: 50%;\r\n");
      out.write("	font-size: 1.3em;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 이전, 다음 화살표에 마우스 커서가 올라가 있을때 */\r\n");
      out.write(".controller span:hover {\r\n");
      out.write("	background-color: rgba(128, 128, 128, 0.11);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".prev {\r\n");
      out.write("	left: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 이전 화살표에 마우스 커서가 올라가 있을때 \r\n");
      out.write("이전 화살표가 살짝 왼쪽으로 이동하는 효과*/\r\n");
      out.write(".prev:hover {\r\n");
      out.write("	transform: translateX(-10px);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".next {\r\n");
      out.write("	right: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 다음 화살표에 마우스 커서가 올라가 있을때 \r\n");
      out.write("이전 화살표가 살짝 오른쪽으로 이동하는 효과*/\r\n");
      out.write(".next:hover {\r\n");
      out.write("	transform: translateX(10px);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"slideShow\">\r\n");
      out.write("		<ul class=\"slides\">\r\n");
      out.write("			<li><img src=\"../image/ramjii.jpg\"></li>\r\n");
      out.write("			<li><img src=\"../image/ramjiii.jpg\"></li>\r\n");
      out.write("			<li><img src=\"../image/ramjiiii.jpg\"></li>\r\n");
      out.write("			<li><img src=\"../image/ramjiiiii.jpg\"></li>\r\n");
      out.write("			<li><img src=\"../image/ramjiiiiii.jpg\"></li>\r\n");
      out.write("			<li><img src=\"../image/ramjiiiiiii.jpg\"></li>\r\n");
      out.write("		</ul>\r\n");
      out.write("		<p class=\"controller\">\r\n");
      out.write("			<span class=\"prev\">&lang;</span> <span class=\"next\">&rang;</span>\r\n");
      out.write("		</p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		const slides = document.querySelector('.slides');\r\n");
      out.write("		const slideImg = document.querySelectorAll('.slides li');\r\n");
      out.write("		let currentIdx = 0;\r\n");
      out.write("		const slideCount = slideImg.length;\r\n");
      out.write("		const prev = document.querySelector('.prev');\r\n");
      out.write("		const next = document.querySelector('.next');\r\n");
      out.write("		const slideWidth = 300;\r\n");
      out.write("		const slideMargin = 100;\r\n");
      out.write("		\r\n");
      out.write("		slides.style.width = (slideWidth + slideMargin)*slideCount + \"px\";\r\n");
      out.write("		\r\n");
      out.write("		function moveSlide(num){\r\n");
      out.write("			slides.style.left = -num*400 + 'px';\r\n");
      out.write("			currentIdx = num;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		prev.addEventListener('click', function() {\r\n");
      out.write("			if(currentIdx != 0) moveSlide(currentIdx -1);\r\n");
      out.write("		});\r\n");
      out.write("		next.addEventListener('click', function() {\r\n");
      out.write("			if(currentIdx != slideCount -1) moveSlide(currentIdx +1);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
